#!/usr/bin/env python3
import os
import sys
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from logger_config import setup_logging
from file_manager import FileManager
from audio_processor import AudioProcessor
from transcriber import Transcriber
from text_formatter import TextFormatter
from ffmpeg_checker import FFmpegChecker


class LectureTranscriber:
    def __init__(self):
        self.logger = setup_logging()
        self._print_welcome_message()
        self.file_manager = FileManager()
        self.audio_processor = AudioProcessor(self.logger)
        self.transcriber = Transcriber(self.logger, model_size="base")
        self.text_formatter = TextFormatter(line_width=80)

    def _print_welcome_message(self):
        """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        print("\n" + "=" * 60)
        print("       –õ–ï–ö–¶–ò–Ø -> –¢–ï–ö–°–¢: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ç–æ—Ä –ª–µ–∫—Ü–∏–π")
        print("=" * 60)
        self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ç–æ—Ä–∞...")

    def process_audio_file(self, audio_path, max_workers=4):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
        try:
            self.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {audio_path}")
            print(f"\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {os.path.basename(audio_path)}")

            # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
            self.file_manager.validate_audio_file(audio_path)
            print("‚úÖ –§–∞–π–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω")

            # 2. –ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            duration = self.audio_processor.get_audio_duration(audio_path)
            duration_minutes = duration / 60.0
            print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration_minutes:.1f} –º–∏–Ω—É—Ç")

            # 3. –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
            if duration > 5 * 60:  # –ë–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç
                print("üîä –°–µ–≥–º–µ–Ω—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø–æ –ø–∞—É–∑–∞–º...")
                segments = self.audio_processor.split_audio_by_silence(audio_path)
                print(f"üìÅ –ê—É–¥–∏–æ —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
            else:
                segments = [audio_path]
                print("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª –∫–∞–∫ –æ–¥–∏–Ω —Å–µ–≥–º–µ–Ω—Ç")

            # 4. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
            print("ü§ñ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
            self.transcriber.load_model()

            print("üé§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")
            results = self.transcriber.transcribe_parallel(segments, max_workers=max_workers)

            # 5. –°–±–æ—Ä–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            print("üìù –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç...")
            final_text = self.text_formatter.assemble_transcript(results)

            if not final_text.strip():
                raise ValueError(
                    "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, –≤ –∞—É–¥–∏–æ –Ω–µ—Ç —Ä–µ—á–∏ –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏ –ø–ª–æ—Ö–æ–µ.")

            # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_path = self.file_manager.generate_output_filename(audio_path)
            self.file_manager.save_text(final_text, output_path)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            word_count = len(final_text.split())
            char_count = len(final_text)

            print(f"\n‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_path}")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {word_count} —Å–ª–æ–≤, {char_count} —Å–∏–º–≤–æ–ª–æ–≤")

            self.logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_path}")
            self.logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {word_count} —Å–ª–æ–≤, {char_count} —Å–∏–º–≤–æ–ª–æ–≤")

            return output_path

        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

            # –î–ª—è –æ—à–∏–±–æ–∫ FFmpeg –≤—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            if "ffmpeg" in str(e).lower() or "ffprobe" in str(e).lower():
                print("\n" + "=" * 50)
                print("–†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° FFMPEG:")
                print(FFmpegChecker.get_installation_instructions())
                print("=" * 50)

            raise


def main():
    parser = argparse.ArgumentParser(description='–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ç–æ—Ä –ª–µ–∫—Ü–∏–π')
    parser.add_argument('audio_file', help='–ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏')
    parser.add_argument('--workers', type=int, default=4,
                        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 4)')
    parser.add_argument('--model', type=str, default='base',
                        choices=['tiny', 'base', 'small', 'medium', 'large'],
                        help='–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ Whisper (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: base)')

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è...")
    ffmpeg_available, ffmpeg_message = FFmpegChecker.check_ffmpeg()
    if not ffmpeg_available:
        print(f"‚ùå {ffmpeg_message}")
        print(FFmpegChecker.get_installation_instructions())
        sys.exit(1)

    transcriber = LectureTranscriber()
    transcriber.transcriber.model_size = args.model

    try:
        result_path = transcriber.process_audio_file(args.audio_file, args.workers)
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–∫—Å—Ç –ª–µ–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª–µ:")
        print(f"   {result_path}")
    except Exception as e:
        print(f"\nüí• –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π")
        sys.exit(1)


if __name__ == "__main__":
    main()